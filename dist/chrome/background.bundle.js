!function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(n,o,function(t){return e[t]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=35)}([function(e,t,r){"use strict";e.exports=r(9)},function(e,t,r){"use strict";r.d(t,"b",(function(){return h}));var n=r(0),o=r.n(n),i=r(2),a=r.n(i);function u(){return(u=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e}).apply(this,arguments)}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}function c(e){var t=e.title,r=e.type,n=e.name,i=e.children,a=s(e,["title","type","name","children"]);return"checkbox"===r?o.a.createElement("label",{htmlFor:n,className:r},o.a.createElement("span",null,t),o.a.createElement("input",u({type:r,name:n,id:n},a)),o.a.createElement("span",{className:"checkmark"})):"select"===r?o.a.createElement("label",{htmlFor:n,className:r},o.a.createElement("span",null,t),o.a.createElement("div",null,o.a.createElement("select",u({name:n,id:n},a),i))):"button"===r||"submit"===r?o.a.createElement("input",u({className:r,type:r,name:n,id:n,value:t},a)):"textarea"===r?o.a.createElement("label",{htmlFor:n,className:r},o.a.createElement("span",null,t),o.a.createElement("textarea",u({name:n,id:n},a))):o.a.createElement("label",{htmlFor:n,className:r},o.a.createElement("span",null,t),o.a.createElement("input",u({type:r,name:n,id:n},a)))}c.defaultProps={children:null},c.propTypes={title:a.a.string.isRequired,type:a.a.string.isRequired,name:a.a.string.isRequired,children:a.a.node};var f=c;function l(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function p(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function d(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if(!(Symbol.iterator in Object(e))&&"[object Arguments]"!==Object.prototype.toString.call(e))return;var r=[],n=!0,o=!1,i=void 0;try{for(var a,u=e[Symbol.iterator]();!(n=(a=u.next()).done)&&(r.push(a.value),!t||r.length!==t);n=!0);}catch(e){o=!0,i=e}finally{try{n||null==u.return||u.return()}finally{if(o)throw i}}return r}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}var h=function(){var e=d(Object(n.useState)({}),2),t=e[0],r=e[1];return{inputs:t,onChange:function(e){var n=e.target,o=n.name,i=n.type,a=["checkbox"].includes(i)?n.checked:n.value;r(function(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?l(Object(r),!0).forEach((function(t){p(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):l(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}({},t,p({},o,a)))}}};r(12),t.a=f},function(e,t,r){e.exports=r(10)()},function(e,t,r){"use strict";var n=r(14),o=Object.prototype.toString;function i(e){return"[object Array]"===o.call(e)}function a(e){return void 0===e}function u(e){return null!==e&&"object"==typeof e}function s(e){return"[object Function]"===o.call(e)}function c(e,t){if(null!=e)if("object"!=typeof e&&(e=[e]),i(e))for(var r=0,n=e.length;r<n;r++)t.call(null,e[r],r,e);else for(var o in e)Object.prototype.hasOwnProperty.call(e,o)&&t.call(null,e[o],o,e)}e.exports={isArray:i,isArrayBuffer:function(e){return"[object ArrayBuffer]"===o.call(e)},isBuffer:function(e){return null!==e&&!a(e)&&null!==e.constructor&&!a(e.constructor)&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)},isFormData:function(e){return"undefined"!=typeof FormData&&e instanceof FormData},isArrayBufferView:function(e){return"undefined"!=typeof ArrayBuffer&&ArrayBuffer.isView?ArrayBuffer.isView(e):e&&e.buffer&&e.buffer instanceof ArrayBuffer},isString:function(e){return"string"==typeof e},isNumber:function(e){return"number"==typeof e},isObject:u,isUndefined:a,isDate:function(e){return"[object Date]"===o.call(e)},isFile:function(e){return"[object File]"===o.call(e)},isBlob:function(e){return"[object Blob]"===o.call(e)},isFunction:s,isStream:function(e){return u(e)&&s(e.pipe)},isURLSearchParams:function(e){return"undefined"!=typeof URLSearchParams&&e instanceof URLSearchParams},isStandardBrowserEnv:function(){return("undefined"==typeof navigator||"ReactNative"!==navigator.product&&"NativeScript"!==navigator.product&&"NS"!==navigator.product)&&("undefined"!=typeof window&&"undefined"!=typeof document)},forEach:c,merge:function e(){var t={};function r(r,n){"object"==typeof t[n]&&"object"==typeof r?t[n]=e(t[n],r):t[n]=r}for(var n=0,o=arguments.length;n<o;n++)c(arguments[n],r);return t},deepMerge:function e(){var t={};function r(r,n){"object"==typeof t[n]&&"object"==typeof r?t[n]=e(t[n],r):t[n]="object"==typeof r?e({},r):r}for(var n=0,o=arguments.length;n<o;n++)c(arguments[n],r);return t},extend:function(e,t,r){return c(t,(function(t,o){e[o]=r&&"function"==typeof t?n(t,r):t})),e},trim:function(e){return e.replace(/^\s*/,"").replace(/\s*$/,"")}}},function(e,t,r){"use strict";var n,o=function(){return void 0===n&&(n=Boolean(window&&document&&document.all&&!window.atob)),n},i=function(){var e={};return function(t){if(void 0===e[t]){var r=document.querySelector(t);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(e){r=null}e[t]=r}return e[t]}}(),a=[];function u(e){for(var t=-1,r=0;r<a.length;r++)if(a[r].identifier===e){t=r;break}return t}function s(e,t){for(var r={},n=[],o=0;o<e.length;o++){var i=e[o],s=t.base?i[0]+t.base:i[0],c=r[s]||0,f="".concat(s," ").concat(c);r[s]=c+1;var l=u(f),p={css:i[1],media:i[2],sourceMap:i[3]};-1!==l?(a[l].references++,a[l].updater(p)):a.push({identifier:f,updater:y(p,t),references:1}),n.push(f)}return n}function c(e){var t=document.createElement("style"),n=e.attributes||{};if(void 0===n.nonce){var o=r.nc;o&&(n.nonce=o)}if(Object.keys(n).forEach((function(e){t.setAttribute(e,n[e])})),"function"==typeof e.insert)e.insert(t);else{var a=i(e.insert||"head");if(!a)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");a.appendChild(t)}return t}var f,l=(f=[],function(e,t){return f[e]=t,f.filter(Boolean).join("\n")});function p(e,t,r,n){var o=r?"":n.media?"@media ".concat(n.media," {").concat(n.css,"}"):n.css;if(e.styleSheet)e.styleSheet.cssText=l(t,o);else{var i=document.createTextNode(o),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(i,a[t]):e.appendChild(i)}}function d(e,t,r){var n=r.css,o=r.media,i=r.sourceMap;if(o?e.setAttribute("media",o):e.removeAttribute("media"),i&&btoa&&(n+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}var h=null,m=0;function y(e,t){var r,n,o;if(t.singleton){var i=m++;r=h||(h=c(t)),n=p.bind(null,r,i,!1),o=p.bind(null,r,i,!0)}else r=c(t),n=d.bind(null,r,t),o=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(r)};return n(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;n(e=t)}else o()}}e.exports=function(e,t){(t=t||{}).singleton||"boolean"==typeof t.singleton||(t.singleton=o());var r=s(e=e||[],t);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var n=0;n<r.length;n++){var o=u(r[n]);a[o].references--}for(var i=s(e,t),c=0;c<r.length;c++){var f=u(r[c]);0===a[f].references&&(a[f].updater(),a.splice(f,1))}r=i}}}},function(e,t,r){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map((function(t){var r=function(e,t){var r=e[1]||"",n=e[3];if(!n)return r;if(t&&"function"==typeof btoa){var o=(a=n,u=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),s="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(u),"/*# ".concat(s," */")),i=n.sources.map((function(e){return"/*# sourceURL=".concat(n.sourceRoot||"").concat(e," */")}));return[r].concat(i).concat([o]).join("\n")}var a,u,s;return[r].join("\n")}(t,e);return t[2]?"@media ".concat(t[2]," {").concat(r,"}"):r})).join("")},t.i=function(e,r,n){"string"==typeof e&&(e=[[null,e,""]]);var o={};if(n)for(var i=0;i<this.length;i++){var a=this[i][0];null!=a&&(o[a]=!0)}for(var u=0;u<e.length;u++){var s=[].concat(e[u]);n&&o[s[0]]||(r&&(s[2]?s[2]="".concat(r," and ").concat(s[2]):s[2]=r),t.push(s))}},t}},function(e,t,r){"use strict";r.d(t,"b",(function(){return p})),r.d(t,"a",(function(){return m})),r.d(t,"c",(function(){return b}));var n,o=r(0),i=r.n(o),a=r(2),u=r.n(a),s=r(1);function c(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function f(e,t){return function(e){if(Array.isArray(e))return e}(e)||function(e,t){if(!(Symbol.iterator in Object(e))&&"[object Arguments]"!==Object.prototype.toString.call(e))return;var r=[],n=!0,o=!1,i=void 0;try{for(var a,u=e[Symbol.iterator]();!(n=(a=u.next()).done)&&(r.push(a.value),!t||r.length!==t);n=!0);}catch(e){o=!0,i=e}finally{try{n||null==u.return||u.return()}finally{if(o)throw i}}return r}(e,t)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}()}function l(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}var p=Object.freeze({YUBIKEY:"yubikey",TOTP:"totp"}),d=Object.freeze((l(n={},p.YUBIKEY,{title:"YubiKey",value:"yubikey",fields:function(e,t){return[i.a.createElement(s.a,{key:"keys",type:"password",name:"keys",title:"Passphrase + YubiKey",value:e.keys||"",onChange:t,pattern:".+.{44}",required:!0})]},onSubmit:function(e){var t=e.keys;return{passphrase:t.slice(0,-44),otp:t.slice(-44)}}}),l(n,p.TOTP,{title:"TOTP",value:"totp",fields:function(e,t){return[i.a.createElement(s.a,{key:"passphrase",type:"password",name:"passphrase",title:"Passphrase",value:e.passphrase||"",onChange:t,required:!0}),i.a.createElement(s.a,{key:"otp",type:"password",name:"otp",title:"TOTP",value:e.otp||"",onChange:t,required:!0})]},onSubmit:function(e){return{passphrase:e.passphrase,otp:e.otp}}}),n));function h(e){var t=e.defaultLoginType,r=e.onLogin,n=f(Object(o.useState)(t),2),a=n[0],u=n[1],h=Object(s.b)(),m=h.inputs,y=h.onChange,b=Object.values(p).map((function(e){return i.a.createElement("option",{key:e,value:d[e].value},d[e].title)}));return i.a.createElement("form",{className:"login",onSubmit:function(e){e.preventDefault();var t=m.remember,n=m.username;r(a,t,function(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?c(Object(r),!0).forEach((function(t){l(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):c(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}({username:n},d[a].onSubmit(m)))}},i.a.createElement(s.a,{type:"select",name:"logintype",title:"Login Type",onChange:function(e){u(e.target.value)}},b),i.a.createElement(s.a,{type:"text",name:"username",title:"Username or e-mail",value:m.username||"",onChange:y,required:!0}),d[a].fields(m,y),i.a.createElement(s.a,{type:"checkbox",name:"remember",title:"Remember Username",checked:m.remember||!1,onChange:y}),i.a.createElement(s.a,{type:"submit",name:"submit",title:"Login to StoredSafe"}))}h.defaultProps={defaultLoginType:p.YUBIKEY},h.propTypes={defaultLoginType:u.a.string,onLogin:u.a.func.isRequired};var m=h;function y(e){var t=e.onLogout;return i.a.createElement("form",{className:"logout",onSubmit:function(e){e.preventDefault(),t()}},i.a.createElement(s.a,{type:"submit",name:"submit",title:"Logout from StoredSafe"}))}y.propTypes={onLogout:u.a.func.isRequired};var b=y},function(e,t,r){"use strict";function n(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}r.d(t,"a",(function(){return i}));var i=Object.freeze({LOGIN:"login",LOGOUT:"logout"}),a=Object.freeze({login:function(e){return browser.runtime.sendMessage(function(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?n(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):n(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}({messageType:i.LOGIN},e))},logout:function(){return browser.runtime.sendMessage({messageType:i.LOGOUT})}});t.b=a},function(e,t,r){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var n=Object.getOwnPropertySymbols,o=Object.prototype.hasOwnProperty,i=Object.prototype.propertyIsEnumerable;function a(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},r=0;r<10;r++)t["_"+String.fromCharCode(r)]=r;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var n={};return"abcdefghijklmnopqrst".split("").forEach((function(e){n[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},n)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var r,u,s=a(e),c=1;c<arguments.length;c++){for(var f in r=Object(arguments[c]))o.call(r,f)&&(s[f]=r[f]);if(n){u=n(r);for(var l=0;l<u.length;l++)i.call(r,u[l])&&(s[u[l]]=r[u[l]])}}return s}},function(e,t,r){"use strict";
/** @license React v16.13.0
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var n=r(8),o="function"==typeof Symbol&&Symbol.for,i=o?Symbol.for("react.element"):60103,a=o?Symbol.for("react.portal"):60106,u=o?Symbol.for("react.fragment"):60107,s=o?Symbol.for("react.strict_mode"):60108,c=o?Symbol.for("react.profiler"):60114,f=o?Symbol.for("react.provider"):60109,l=o?Symbol.for("react.context"):60110,p=o?Symbol.for("react.forward_ref"):60112,d=o?Symbol.for("react.suspense"):60113,h=o?Symbol.for("react.memo"):60115,m=o?Symbol.for("react.lazy"):60116,y="function"==typeof Symbol&&Symbol.iterator;function b(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,r=1;r<arguments.length;r++)t+="&args[]="+encodeURIComponent(arguments[r]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var v={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},g={};function w(e,t,r){this.props=e,this.context=t,this.refs=g,this.updater=r||v}function O(){}function k(e,t,r){this.props=e,this.context=t,this.refs=g,this.updater=r||v}w.prototype.isReactComponent={},w.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(b(85));this.updater.enqueueSetState(this,e,t,"setState")},w.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},O.prototype=w.prototype;var S=k.prototype=new O;S.constructor=k,n(S,w.prototype),S.isPureReactComponent=!0;var x={current:null},j=Object.prototype.hasOwnProperty,E={key:!0,ref:!0,__self:!0,__source:!0};function T(e,t,r){var n,o={},a=null,u=null;if(null!=t)for(n in void 0!==t.ref&&(u=t.ref),void 0!==t.key&&(a=""+t.key),t)j.call(t,n)&&!E.hasOwnProperty(n)&&(o[n]=t[n]);var s=arguments.length-2;if(1===s)o.children=r;else if(1<s){for(var c=Array(s),f=0;f<s;f++)c[f]=arguments[f+2];o.children=c}if(e&&e.defaultProps)for(n in s=e.defaultProps)void 0===o[n]&&(o[n]=s[n]);return{$$typeof:i,type:e,key:a,ref:u,props:o,_owner:x.current}}function P(e){return"object"==typeof e&&null!==e&&e.$$typeof===i}var C=/\/+/g,A=[];function R(e,t,r,n){if(A.length){var o=A.pop();return o.result=e,o.keyPrefix=t,o.func=r,o.context=n,o.count=0,o}return{result:e,keyPrefix:t,func:r,context:n,count:0}}function N(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>A.length&&A.push(e)}function L(e,t,r){return null==e?0:function e(t,r,n,o){var u=typeof t;"undefined"!==u&&"boolean"!==u||(t=null);var s=!1;if(null===t)s=!0;else switch(u){case"string":case"number":s=!0;break;case"object":switch(t.$$typeof){case i:case a:s=!0}}if(s)return n(o,t,""===r?"."+I(t,0):r),1;if(s=0,r=""===r?".":r+":",Array.isArray(t))for(var c=0;c<t.length;c++){var f=r+I(u=t[c],c);s+=e(u,f,n,o)}else if(null===t||"object"!=typeof t?f=null:f="function"==typeof(f=y&&t[y]||t["@@iterator"])?f:null,"function"==typeof f)for(t=f.call(t),c=0;!(u=t.next()).done;)s+=e(u=u.value,f=r+I(u,c++),n,o);else if("object"===u)throw n=""+t,Error(b(31,"[object Object]"===n?"object with keys {"+Object.keys(t).join(", ")+"}":n,""));return s}(e,"",t,r)}function I(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,(function(e){return t[e]}))}(e.key):t.toString(36)}function _(e,t){e.func.call(e.context,t,e.count++)}function U(e,t,r){var n=e.result,o=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?B(e,n,r,(function(e){return e})):null!=e&&(P(e)&&(e=function(e,t){return{$$typeof:i,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(e,o+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(C,"$&/")+"/")+r)),n.push(e))}function B(e,t,r,n,o){var i="";null!=r&&(i=(""+r).replace(C,"$&/")+"/"),L(e,U,t=R(t,i,n,o)),N(t)}var D={current:null};function $(){var e=D.current;if(null===e)throw Error(b(321));return e}var q={ReactCurrentDispatcher:D,ReactCurrentBatchConfig:{suspense:null},ReactCurrentOwner:x,IsSomeRendererActing:{current:!1},assign:n};t.Children={map:function(e,t,r){if(null==e)return e;var n=[];return B(e,n,null,t,r),n},forEach:function(e,t,r){if(null==e)return e;L(e,_,t=R(null,null,t,r)),N(t)},count:function(e){return L(e,(function(){return null}),null)},toArray:function(e){var t=[];return B(e,t,null,(function(e){return e})),t},only:function(e){if(!P(e))throw Error(b(143));return e}},t.Component=w,t.Fragment=u,t.Profiler=c,t.PureComponent=k,t.StrictMode=s,t.Suspense=d,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=q,t.cloneElement=function(e,t,r){if(null==e)throw Error(b(267,e));var o=n({},e.props),a=e.key,u=e.ref,s=e._owner;if(null!=t){if(void 0!==t.ref&&(u=t.ref,s=x.current),void 0!==t.key&&(a=""+t.key),e.type&&e.type.defaultProps)var c=e.type.defaultProps;for(f in t)j.call(t,f)&&!E.hasOwnProperty(f)&&(o[f]=void 0===t[f]&&void 0!==c?c[f]:t[f])}var f=arguments.length-2;if(1===f)o.children=r;else if(1<f){c=Array(f);for(var l=0;l<f;l++)c[l]=arguments[l+2];o.children=c}return{$$typeof:i,type:e.type,key:a,ref:u,props:o,_owner:s}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:l,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:f,_context:e},e.Consumer=e},t.createElement=T,t.createFactory=function(e){var t=T.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:p,render:e}},t.isValidElement=P,t.lazy=function(e){return{$$typeof:m,_ctor:e,_status:-1,_result:null}},t.memo=function(e,t){return{$$typeof:h,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return $().useCallback(e,t)},t.useContext=function(e,t){return $().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return $().useEffect(e,t)},t.useImperativeHandle=function(e,t,r){return $().useImperativeHandle(e,t,r)},t.useLayoutEffect=function(e,t){return $().useLayoutEffect(e,t)},t.useMemo=function(e,t){return $().useMemo(e,t)},t.useReducer=function(e,t,r){return $().useReducer(e,t,r)},t.useRef=function(e){return $().useRef(e)},t.useState=function(e){return $().useState(e)},t.version="16.13.0"},function(e,t,r){"use strict";var n=r(11);function o(){}function i(){}i.resetWarningCache=o,e.exports=function(){function e(e,t,r,o,i,a){if(a!==n){var u=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw u.name="Invariant Violation",u}}function t(){return e}e.isRequired=e;var r={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:i,resetWarningCache:o};return r.PropTypes=r,r}},function(e,t,r){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,r){var n=r(4),o=r(13);"string"==typeof(o=o.__esModule?o.default:o)&&(o=[[e.i,o,""]]);var i={insert:"head",singleton:!1},a=(n(o,i),o.locals?o.locals:{});e.exports=a},function(e,t,r){(t=r(5)(!1)).push([e.i,'label{display:flex;flex-direction:column;margin-bottom:1em;width:100%}label span{font-family:"Montserrat",Helvetica,sans-serif;text-transform:uppercase}input,button,select{border:0;box-sizing:border-box;outline:0;padding:1em}input:not([type=submit]):not([type=button]):not([type=checkbox]):not([type=radio]),select,option{background-color:#fff;border-bottom:1px solid #ebeef0;color:#000;font-family:sans-serif;font-size:1em;transition:.5s ease}input:not([type=submit]):not([type=button]):not([type=checkbox]):not([type=radio]):hover,input:not([type=submit]):not([type=button]):not([type=checkbox]):not([type=radio]):focus,select:hover,select:focus,option:hover,option:focus{border-bottom-color:#03a386}input:not([type=submit]):not([type=button]):not([type=checkbox]):not([type=radio]):focus,select:focus,option:focus{background-color:#ebeef0}option{background-color:#fff}button,input[type=button],input[type=submit]{background:#526a78;border:1px solid #fff;border-radius:.25em;color:#fff;font-weight:bold;text-transform:uppercase;transition:.5s ease;width:100%}button:hover,button:focus,button:active,input[type=button]:hover,input[type=button]:focus,input[type=button]:active,input[type=submit]:hover,input[type=submit]:focus,input[type=submit]:active{background-color:#fff;border:1px solid #03a386;color:#03a386}button:active,input[type=button]:active,input[type=submit]:active{background-color:#ebeef0}.checkbox{align-items:center;cursor:pointer;flex-direction:row-reverse;justify-content:flex-end}.checkbox input{height:0;opacity:0;position:absolute;width:0}.checkbox .checkmark{border:1px solid #ebeef0;border-radius:.25em;height:1.5em;margin-right:.5em;transition:.5s ease;width:1.5em}.checkbox .checkmark::after{border:solid #fff;border-width:0 .2em .2em 0;box-sizing:border-box;font-size:1rem;height:60%;margin:19% 35%;transform:rotate(45deg);width:30%}.checkbox .checkmark::after{content:"";display:none}.checkbox input:checked~.checkmark::after{display:block}.checkbox:hover input~.checkmark{border:1px solid #03a386}.checkbox input:focus~.checkmark{background-color:#ebeef0;border-color:#03a386}.checkbox:active input~.checkmark{background-color:#ebeef0}.checkbox input:checked~.checkmark{background-color:#03a386}select{-moz-appearance:none;-webkit-appearance:none;appearance:none;padding-right:2.25em;width:100%}.select div{position:relative}.select div::after{border:solid transparent;border-radius:.25em;border-top-color:#526a78;border-width:.7em .5em;box-sizing:border-box;content:"";height:1em;margin-top:-0.35em;position:absolute;right:.75em;top:50%;transition:.5s;width:1em}',""]),e.exports=t},function(e,t,r){"use strict";e.exports=function(e,t){return function(){for(var r=new Array(arguments.length),n=0;n<r.length;n++)r[n]=arguments[n];return e.apply(t,r)}}},function(e,t,r){"use strict";var n=r(3);function o(e){return encodeURIComponent(e).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%20/g,"+").replace(/%5B/gi,"[").replace(/%5D/gi,"]")}e.exports=function(e,t,r){if(!t)return e;var i;if(r)i=r(t);else if(n.isURLSearchParams(t))i=t.toString();else{var a=[];n.forEach(t,(function(e,t){null!=e&&(n.isArray(e)?t+="[]":e=[e],n.forEach(e,(function(e){n.isDate(e)?e=e.toISOString():n.isObject(e)&&(e=JSON.stringify(e)),a.push(o(t)+"="+o(e))})))})),i=a.join("&")}if(i){var u=e.indexOf("#");-1!==u&&(e=e.slice(0,u)),e+=(-1===e.indexOf("?")?"?":"&")+i}return e}},function(e,t,r){"use strict";e.exports=function(e){return!(!e||!e.__CANCEL__)}},function(e,t,r){"use strict";(function(t){var n=r(3),o=r(44),i={"Content-Type":"application/x-www-form-urlencoded"};function a(e,t){!n.isUndefined(e)&&n.isUndefined(e["Content-Type"])&&(e["Content-Type"]=t)}var u,s={adapter:(("undefined"!=typeof XMLHttpRequest||void 0!==t&&"[object process]"===Object.prototype.toString.call(t))&&(u=r(18)),u),transformRequest:[function(e,t){return o(t,"Accept"),o(t,"Content-Type"),n.isFormData(e)||n.isArrayBuffer(e)||n.isBuffer(e)||n.isStream(e)||n.isFile(e)||n.isBlob(e)?e:n.isArrayBufferView(e)?e.buffer:n.isURLSearchParams(e)?(a(t,"application/x-www-form-urlencoded;charset=utf-8"),e.toString()):n.isObject(e)?(a(t,"application/json;charset=utf-8"),JSON.stringify(e)):e}],transformResponse:[function(e){if("string"==typeof e)try{e=JSON.parse(e)}catch(e){}return e}],timeout:0,xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",maxContentLength:-1,validateStatus:function(e){return e>=200&&e<300}};s.headers={common:{Accept:"application/json, text/plain, */*"}},n.forEach(["delete","get","head"],(function(e){s.headers[e]={}})),n.forEach(["post","put","patch"],(function(e){s.headers[e]=n.merge(i)})),e.exports=s}).call(this,r(43))},function(e,t,r){"use strict";var n=r(3),o=r(45),i=r(15),a=r(47),u=r(50),s=r(51),c=r(19);e.exports=function(e){return new Promise((function(t,f){var l=e.data,p=e.headers;n.isFormData(l)&&delete p["Content-Type"];var d=new XMLHttpRequest;if(e.auth){var h=e.auth.username||"",m=e.auth.password||"";p.Authorization="Basic "+btoa(h+":"+m)}var y=a(e.baseURL,e.url);if(d.open(e.method.toUpperCase(),i(y,e.params,e.paramsSerializer),!0),d.timeout=e.timeout,d.onreadystatechange=function(){if(d&&4===d.readyState&&(0!==d.status||d.responseURL&&0===d.responseURL.indexOf("file:"))){var r="getAllResponseHeaders"in d?u(d.getAllResponseHeaders()):null,n={data:e.responseType&&"text"!==e.responseType?d.response:d.responseText,status:d.status,statusText:d.statusText,headers:r,config:e,request:d};o(t,f,n),d=null}},d.onabort=function(){d&&(f(c("Request aborted",e,"ECONNABORTED",d)),d=null)},d.onerror=function(){f(c("Network Error",e,null,d)),d=null},d.ontimeout=function(){var t="timeout of "+e.timeout+"ms exceeded";e.timeoutErrorMessage&&(t=e.timeoutErrorMessage),f(c(t,e,"ECONNABORTED",d)),d=null},n.isStandardBrowserEnv()){var b=r(52),v=(e.withCredentials||s(y))&&e.xsrfCookieName?b.read(e.xsrfCookieName):void 0;v&&(p[e.xsrfHeaderName]=v)}if("setRequestHeader"in d&&n.forEach(p,(function(e,t){void 0===l&&"content-type"===t.toLowerCase()?delete p[t]:d.setRequestHeader(t,e)})),n.isUndefined(e.withCredentials)||(d.withCredentials=!!e.withCredentials),e.responseType)try{d.responseType=e.responseType}catch(t){if("json"!==e.responseType)throw t}"function"==typeof e.onDownloadProgress&&d.addEventListener("progress",e.onDownloadProgress),"function"==typeof e.onUploadProgress&&d.upload&&d.upload.addEventListener("progress",e.onUploadProgress),e.cancelToken&&e.cancelToken.promise.then((function(e){d&&(d.abort(),f(e),d=null)})),void 0===l&&(l=null),d.send(l)}))}},function(e,t,r){"use strict";var n=r(46);e.exports=function(e,t,r,o,i){var a=new Error(e);return n(a,t,r,o,i)}},function(e,t,r){"use strict";var n=r(3);e.exports=function(e,t){t=t||{};var r={},o=["url","method","params","data"],i=["headers","auth","proxy"],a=["baseURL","url","transformRequest","transformResponse","paramsSerializer","timeout","withCredentials","adapter","responseType","xsrfCookieName","xsrfHeaderName","onUploadProgress","onDownloadProgress","maxContentLength","validateStatus","maxRedirects","httpAgent","httpsAgent","cancelToken","socketPath"];n.forEach(o,(function(e){void 0!==t[e]&&(r[e]=t[e])})),n.forEach(i,(function(o){n.isObject(t[o])?r[o]=n.deepMerge(e[o],t[o]):void 0!==t[o]?r[o]=t[o]:n.isObject(e[o])?r[o]=n.deepMerge(e[o]):void 0!==e[o]&&(r[o]=e[o])})),n.forEach(a,(function(n){void 0!==t[n]?r[n]=t[n]:void 0!==e[n]&&(r[n]=e[n])}));var u=o.concat(i).concat(a),s=Object.keys(t).filter((function(e){return-1===u.indexOf(e)}));return n.forEach(s,(function(n){void 0!==t[n]?r[n]=t[n]:void 0!==e[n]&&(r[n]=e[n])})),r}},function(e,t,r){"use strict";function n(e){this.message=e}n.prototype.toString=function(){return"Cancel"+(this.message?": "+this.message:"")},n.prototype.__CANCEL__=!0,e.exports=n},,function(e,t,r){const n=r(37);LoginType=Object.freeze({TOTP:"totp",SMARTCARD:"smc_rest"});e.exports=class{constructor(e,t,r=null,o="1.0"){this.axios=n.create({baseURL:`https://${e}/api/${o}/`,timeout:5e3,validateStatus:function(e){return e>=200&&e<=403}}),this.apikey=t,this.token=r}authYubikey(e,t,r){return this.axios.post("/auth",{username:e,keys:`${t}${this.apikey}${r}`}).then(e=>(this.token=e.data.CALLINFO.token,e))}authTotp(e,t,r){return this.axios.post("/auth",{username:e,passphrase:t,otp:r,logintype:LoginType.TOTP,apikey:this.apikey}).then(e=>(this.token=e.data.CALLINFO.token,e))}authSmartcard(e,t,r){return this.axios.post("/auth",{username:e,passphrase:t,otp:r,logintype:LoginType.SMARTCARD,apikey:this.apikey}).then(e=>(this.token=e.data.CALLINFO.token,e))}logout(){return this.axios.get("/auth/logout",{params:{token:this.token}}).then(e=>(this.token=null,e))}check(){return this.axios.post("/auth/check",{token:this.token})}vaultList(){return this.axios.get("/vault",{params:{token:this.token}})}vaultObjects(e){return this.axios.get(`/vault/${e}`,{params:{token:this.token}})}vaultCreate(e){return this.axios.post("/vault",{...e,token:this.token})}vaultEdit(e,t){return this.axios.put(`/vault/${e}`,{...t,token:this.token})}vaultDelete(e){return this.axios.delete(`/vault/${e}`,{params:{token:this.token}})}object(e,t=!1){return this.axios.get(`/object/${e}`,{params:{token:this.token,children:t}})}objectDecrypt(e){return this.axios.get(`/object/${e}`,{params:{token:this.token,decrypt:!0}})}objectCreate(e){return this.axios.post("/object",{...e,token:this.token})}objectEdit(e,t){return this.axios.put(`/object/${e}`,{...t,token:this.token})}objectDelete(e){return this.axios.delete(`/object/${e}`,{params:{token:this.token}})}find(e){return this.axios.get("/find",{params:{token:this.token,needle:e}})}templateList(){return this.axios.get("/template",{params:{token:this.token}})}template(e){return this.axios.get(`/template/${e}`,{params:{token:this.token}})}}},,,,,,,,,,,,function(e,t,r){"use strict";r.r(t);var n=r(6),o=r(7);r(36),browser.runtime.onInstalled.addListener((function(){browser.runtime.openOptionsPage()})),browser.runtime.onMessage.addListener((function(e,t){return e.messageType===o.a.LOGIN?(i=(r=e).loginType,r.remember,r.fields,i===n.b.YUBIKEY||i===n.b.YUBIKEY?Promise.resolve():Promise.reject()):e.messageType===o.a.LOGOUT?Promise.resolve():Promise.reject(new Error("Invalid message",e,t));var r,i})),browser.contextMenus.create({id:"open-popup",title:"open popup",contexts:["editable"]}),browser.contextMenus.onClicked.addListener((function(){browser.browserAction.openPopup()}))},function(e,t,r){"use strict";r.r(t);var n=r(23),o=r.n(n),i=r(55);window.storedsafe={storage:i,api:o.a,default:function(){browser.browserAction.setIcon({path:"icon.png"}),browser.browserAction.setBadgeBackgroundColor({color:"blue"})},alert:function(){browser.browserAction.setIcon({path:"icon-alert.png"}),browser.browserAction.setBadgeBackgroundColor({color:"red"})},inactive:function(){browser.browserAction.setIcon({path:"icon-inactive.png"}),browser.browserAction.setBadgeBackgroundColor({color:"gray"})},setBadge:function(e){browser.browserAction.setBadgeText({text:e})}}},function(e,t,r){e.exports=r(38)},function(e,t,r){"use strict";var n=r(3),o=r(14),i=r(39),a=r(20);function u(e){var t=new i(e),r=o(i.prototype.request,t);return n.extend(r,i.prototype,t),n.extend(r,t),r}var s=u(r(17));s.Axios=i,s.create=function(e){return u(a(s.defaults,e))},s.Cancel=r(21),s.CancelToken=r(53),s.isCancel=r(16),s.all=function(e){return Promise.all(e)},s.spread=r(54),e.exports=s,e.exports.default=s},function(e,t,r){"use strict";var n=r(3),o=r(15),i=r(40),a=r(41),u=r(20);function s(e){this.defaults=e,this.interceptors={request:new i,response:new i}}s.prototype.request=function(e){"string"==typeof e?(e=arguments[1]||{}).url=arguments[0]:e=e||{},(e=u(this.defaults,e)).method?e.method=e.method.toLowerCase():this.defaults.method?e.method=this.defaults.method.toLowerCase():e.method="get";var t=[a,void 0],r=Promise.resolve(e);for(this.interceptors.request.forEach((function(e){t.unshift(e.fulfilled,e.rejected)})),this.interceptors.response.forEach((function(e){t.push(e.fulfilled,e.rejected)}));t.length;)r=r.then(t.shift(),t.shift());return r},s.prototype.getUri=function(e){return e=u(this.defaults,e),o(e.url,e.params,e.paramsSerializer).replace(/^\?/,"")},n.forEach(["delete","get","head","options"],(function(e){s.prototype[e]=function(t,r){return this.request(n.merge(r||{},{method:e,url:t}))}})),n.forEach(["post","put","patch"],(function(e){s.prototype[e]=function(t,r,o){return this.request(n.merge(o||{},{method:e,url:t,data:r}))}})),e.exports=s},function(e,t,r){"use strict";var n=r(3);function o(){this.handlers=[]}o.prototype.use=function(e,t){return this.handlers.push({fulfilled:e,rejected:t}),this.handlers.length-1},o.prototype.eject=function(e){this.handlers[e]&&(this.handlers[e]=null)},o.prototype.forEach=function(e){n.forEach(this.handlers,(function(t){null!==t&&e(t)}))},e.exports=o},function(e,t,r){"use strict";var n=r(3),o=r(42),i=r(16),a=r(17);function u(e){e.cancelToken&&e.cancelToken.throwIfRequested()}e.exports=function(e){return u(e),e.headers=e.headers||{},e.data=o(e.data,e.headers,e.transformRequest),e.headers=n.merge(e.headers.common||{},e.headers[e.method]||{},e.headers),n.forEach(["delete","get","head","post","put","patch","common"],(function(t){delete e.headers[t]})),(e.adapter||a.adapter)(e).then((function(t){return u(e),t.data=o(t.data,t.headers,e.transformResponse),t}),(function(t){return i(t)||(u(e),t&&t.response&&(t.response.data=o(t.response.data,t.response.headers,e.transformResponse))),Promise.reject(t)}))}},function(e,t,r){"use strict";var n=r(3);e.exports=function(e,t,r){return n.forEach(r,(function(r){e=r(e,t)})),e}},function(e,t){var r,n,o=e.exports={};function i(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function u(e){if(r===setTimeout)return setTimeout(e,0);if((r===i||!r)&&setTimeout)return r=setTimeout,setTimeout(e,0);try{return r(e,0)}catch(t){try{return r.call(null,e,0)}catch(t){return r.call(this,e,0)}}}!function(){try{r="function"==typeof setTimeout?setTimeout:i}catch(e){r=i}try{n="function"==typeof clearTimeout?clearTimeout:a}catch(e){n=a}}();var s,c=[],f=!1,l=-1;function p(){f&&s&&(f=!1,s.length?c=s.concat(c):l=-1,c.length&&d())}function d(){if(!f){var e=u(p);f=!0;for(var t=c.length;t;){for(s=c,c=[];++l<t;)s&&s[l].run();l=-1,t=c.length}s=null,f=!1,function(e){if(n===clearTimeout)return clearTimeout(e);if((n===a||!n)&&clearTimeout)return n=clearTimeout,clearTimeout(e);try{n(e)}catch(t){try{return n.call(null,e)}catch(t){return n.call(this,e)}}}(e)}}function h(e,t){this.fun=e,this.array=t}function m(){}o.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)t[r-1]=arguments[r];c.push(new h(e,t)),1!==c.length||f||u(d)},h.prototype.run=function(){this.fun.apply(null,this.array)},o.title="browser",o.browser=!0,o.env={},o.argv=[],o.version="",o.versions={},o.on=m,o.addListener=m,o.once=m,o.off=m,o.removeListener=m,o.removeAllListeners=m,o.emit=m,o.prependListener=m,o.prependOnceListener=m,o.listeners=function(e){return[]},o.binding=function(e){throw new Error("process.binding is not supported")},o.cwd=function(){return"/"},o.chdir=function(e){throw new Error("process.chdir is not supported")},o.umask=function(){return 0}},function(e,t,r){"use strict";var n=r(3);e.exports=function(e,t){n.forEach(e,(function(r,n){n!==t&&n.toUpperCase()===t.toUpperCase()&&(e[t]=r,delete e[n])}))}},function(e,t,r){"use strict";var n=r(19);e.exports=function(e,t,r){var o=r.config.validateStatus;!o||o(r.status)?e(r):t(n("Request failed with status code "+r.status,r.config,null,r.request,r))}},function(e,t,r){"use strict";e.exports=function(e,t,r,n,o){return e.config=t,r&&(e.code=r),e.request=n,e.response=o,e.isAxiosError=!0,e.toJSON=function(){return{message:this.message,name:this.name,description:this.description,number:this.number,fileName:this.fileName,lineNumber:this.lineNumber,columnNumber:this.columnNumber,stack:this.stack,config:this.config,code:this.code}},e}},function(e,t,r){"use strict";var n=r(48),o=r(49);e.exports=function(e,t){return e&&!n(t)?o(e,t):t}},function(e,t,r){"use strict";e.exports=function(e){return/^([a-z][a-z\d\+\-\.]*:)?\/\//i.test(e)}},function(e,t,r){"use strict";e.exports=function(e,t){return t?e.replace(/\/+$/,"")+"/"+t.replace(/^\/+/,""):e}},function(e,t,r){"use strict";var n=r(3),o=["age","authorization","content-length","content-type","etag","expires","from","host","if-modified-since","if-unmodified-since","last-modified","location","max-forwards","proxy-authorization","referer","retry-after","user-agent"];e.exports=function(e){var t,r,i,a={};return e?(n.forEach(e.split("\n"),(function(e){if(i=e.indexOf(":"),t=n.trim(e.substr(0,i)).toLowerCase(),r=n.trim(e.substr(i+1)),t){if(a[t]&&o.indexOf(t)>=0)return;a[t]="set-cookie"===t?(a[t]?a[t]:[]).concat([r]):a[t]?a[t]+", "+r:r}})),a):a}},function(e,t,r){"use strict";var n=r(3);e.exports=n.isStandardBrowserEnv()?function(){var e,t=/(msie|trident)/i.test(navigator.userAgent),r=document.createElement("a");function o(e){var n=e;return t&&(r.setAttribute("href",n),n=r.href),r.setAttribute("href",n),{href:r.href,protocol:r.protocol?r.protocol.replace(/:$/,""):"",host:r.host,search:r.search?r.search.replace(/^\?/,""):"",hash:r.hash?r.hash.replace(/^#/,""):"",hostname:r.hostname,port:r.port,pathname:"/"===r.pathname.charAt(0)?r.pathname:"/"+r.pathname}}return e=o(window.location.href),function(t){var r=n.isString(t)?o(t):t;return r.protocol===e.protocol&&r.host===e.host}}():function(){return!0}},function(e,t,r){"use strict";var n=r(3);e.exports=n.isStandardBrowserEnv()?{write:function(e,t,r,o,i,a){var u=[];u.push(e+"="+encodeURIComponent(t)),n.isNumber(r)&&u.push("expires="+new Date(r).toGMTString()),n.isString(o)&&u.push("path="+o),n.isString(i)&&u.push("domain="+i),!0===a&&u.push("secure"),document.cookie=u.join("; ")},read:function(e){var t=document.cookie.match(new RegExp("(^|;\\s*)("+e+")=([^;]*)"));return t?decodeURIComponent(t[3]):null},remove:function(e){this.write(e,"",Date.now()-864e5)}}:{write:function(){},read:function(){return null},remove:function(){}}},function(e,t,r){"use strict";var n=r(21);function o(e){if("function"!=typeof e)throw new TypeError("executor must be a function.");var t;this.promise=new Promise((function(e){t=e}));var r=this;e((function(e){r.reason||(r.reason=new n(e),t(r.reason))}))}o.prototype.throwIfRequested=function(){if(this.reason)throw this.reason},o.source=function(){var e;return{token:new o((function(t){e=t})),cancel:e}},e.exports=o},function(e,t,r){"use strict";e.exports=function(e){return function(t){return e.apply(null,t)}}},function(e,t,r){function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e){return(o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e})(e)}var i=r(56),a=browser.storage.local,u=browser.storage.sync,s=browser.storage.managed,c=Object.freeze({SETTINGS:"settings",SESSIONS:"sessions"});function f(e){return"object"===o(e)&&!Array.isArray(e)&&null!==e}function l(e,t){var r={},n=Object.keys(e),o=Object.keys(t),i=[];return n.forEach((function(n){i.push(n),f(e[n])&&f(t[n])?r[n]=l(e[n],t[n]):Array.isArray(e[n])&&Array.isArray(t[n])?r[n]=e[n].concat(t[n]):void 0!==e[n]?r[n]=e[n]:void 0!==t[n]&&(r[n]=t[n])})),o.filter((function(e){return!i.includes(e)})).forEach((function(e){r[e]=t[e]})),r}function p(){return s.get(c.SETTINGS).then((function(e){return e.hasOwnProperty(c.SETTINGS)?e[c.SETTINGS]:i.managedSettings}))}function d(){return u.get(c.SETTINGS).then((function(e){return e.hasOwnProperty(c.SETTINGS)?e[c.SETTINGS]:{}}))}function h(e){return u.set(n({},c.SETTINGS,e)).then((function(){return e}))}function m(){return a.get(c.SESSIONS).then((function(e){return e.hasOwnProperty(c.SESSIONS)?e[c.SESSIONS]:i.sessions}))}function y(e){return a.set(n({},c.SESSIONS,e)).then((function(){return e}))}e.exports=Object.freeze({getSettings:function(e){return p().then((function(t){var r;if(t.enforced.hasOwnProperty(e)&&!f(r=t.enforced[e]))return r;var n=t.defaults;return d().then((function(t){if(t.hasOwnProperty(e))return f(r)?l(r,t[e]):t[e];if(n.hasOwnProperty(e))return n[e];if(i.settings.hasOwnProperty(e))return i.settings[e];throw new Error("Invalid key: ".concat(e))}))}))},getAllSettings:function(){return p().then((function(e){return d().then((function(t){return{system:e.enforced,user:t,defaults:l(e.defaults,i.settings)}}))}))},updateUserSettings:function(e){return d().then((function(t){return h(l(e,t))}))},removeUserSettingsField:function(e){return d().then((function(t){var r=t;return e.slice(0,-1).forEach((function(t){if(!r.hasOwnProperty(t))throw new Error("Invalid path: [".concat(e.join(", "),"]"));r=r[t]})),delete r[e.pop()],h(t)}))},getActiveSession:function(){return m().then((function(e){return null!==e.current?e.sessions[e.current]:null}))},getAllSessions:function(){return m()},setActiveSession:function(e){return m().then((function(t){if(t.sessions.hasOwnProperty(e))return t.current=e,y(t).then((function(t){return t.sessions[e]}));throw new Error("No session for site ".concat(e))}))},createSession:function(e,t){return m().then((function(r){var n=Date.now(),o={token:t,createdAt:n,lastActive:n};return r.current=e,r.sessions[e]=o,y(r)}))},updateSessionLastActive:function(){return m().then((function(e){return e.sessions[e.current].lastActive=Date.now(),y(e).then((function(t){return t.sessions[e.current]}))}))},removeSession:function(e){return m().then((function(t){var r=t.sessions[e];return delete t.sessions[e],t.current===e&&(t.current=null),y(t).then((function(){return r}))}))},clearSessions:function(){return y(i.sessions)},merge:l})},function(e,t){e.exports=Object.freeze({settings:{sites:{},maxIdle:15,maxTokenLife:180,autoFill:!1,theme:"dark"},sessions:{current:null,sessions:{}},managedSettings:{enforced:{},defaults:{}}})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,